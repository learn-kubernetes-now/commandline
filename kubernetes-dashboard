kubernetes-dashboard
# Add kubernetes-dashboard repository
helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
# Deploy a Helm Release named "kubernetes-dashboard" using the kubernetes-dashboard chart
helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard


helm delete kubernetes-dashboard

helm install kubernetes-dashboard/kubernetes-dashboard --name kubernetes-dashboard \
  --set=service.externalPort=8080,resources.limits.cpu=200m

helm install kubernetes-dashboard/kubernetes-dashboard --name kubernetes-dashboard -f values.yaml

kubectl label --overwrite ns kubernetes-dashboard pod-security.kubernetes.io/enforce=baseline

apiVersion: v1
kind: ServiceAccount
metadata:  
  name: admin-user  
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:  
  name: admin-user
roleRef:  
  apiGroup: rbac.authorization.k8s.io  
  kind: ClusterRole  
  name: cluster-admin
subjects:- 
  kind: ServiceAccount  
  name: admin-user  
  namespace: kubernetes-dashboard
---
apiVersion: v1
kind: Secret
metadata:  
  name: admin-user  
  namespace: kubernetes-dashboard  
  annotations:    
    kubernetes.io/service-account.name: "admin-user"
type: kubernetes.io/service-account-token



kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJuM1BxUjByend2Y0JQNS1fdFoyel9aOXJVZERScW5BbklXckdSU3J0MGcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiYWRtaW4tdXNlciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImI0OGMzMzIwLWVjYTktNGYyYS1iNTBjLWQ2NTIxYzA5YWU2ZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmFkbWluLXVzZXIifQ.k0yzlJuJqwWF945bJDbbuBNp0DyAEovTIj2YwCwXXO6hhTboo5QGW_IWMxoKpHuSaEZXneTf-e4Q5xP5-qflnVjURFNnwDdbu7PfgTenNQAyJe-7_L5OjyjoLz1Cb3hp3xkmiG7XojQfUic_FyNY6RxinEovvav0HTPxtydBTNygCDJ9dlKZf7wZu4FjZuutOj0sgStg7o4U-xHYcaXOCdBSBgslWRfSd_zRI-QdZmzujM9Fwnn9bEK5oNDPM3ULP6ZwIO2s3B6iQw9C-TI8Bmr7Db4OGM1Y9j0Y7QAF-EIF7SLESmp9791WUs3T0BDo6tGYKybmLDR1HlLt6_mXxw


kubectl get secret $(kubectl get serviceaccount dashboard-user -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode


Allow access with read-only user
Note that the steps above grant admin privileges to the dashboard-user account. If you want to allow access with a read-only user instead, you will need to create a read-only role, and rolebinding to apply to the serviceaccount.

First, create the read-only role yaml file and apply it to the cluster:

dashboard-read-only-role.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: kubernetes-dashboard
  name: dashboard-read-only-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets", "deployments", "replicasets", "pods/log"]
  verbs: ["get", "list", "watch"]


kubectl apply -f dashboard-read-only-role.yaml



